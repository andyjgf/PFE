<pre class='metadata'>
Title: Progressive Font Enrichment, or whatever we call it
Shortname: PFE
Status: w3c/ED
Group: webfontswg
Level: none
TR: https://www.w3.org/TR/example/
ED: https://w3c.github.io/PFE/Overview.html
Editor: Chris Lilley, W3C, https://svgees.us/, w3cid 1438
Editor: Myles C. Maxfield, Apple Inc., mmaxfield@apple.com, w3cid 77180
Editor: Garret Rieger, Google Inc., http://example.com/contact
Abstract: Example example
Status Text: This is a largely empty document because we have just started working on it.
</pre>

<!--
    for things that are not in specref
    https://www.specref.org/
-->
<pre class=biblio>
	{
		"PFE-report": {
            "href": "https://www.w3.org/TR/PFE-evaluation/",
            "authors": [
                "Chris Lilley"
                ],
            "status": "Note",
            "publisher": "W3C",
			"title": "Progressive Font Enrichment: Evaluation Report",
			"date": "15 October 2020"
		}
	}
</pre>

Introduction {#intro}
=====================

	<em>This section is not normative.</em>

    The success of WebFonts is unevenly distributed. This specification allows WebFonts to be used where slow networks, very large fonts, or complex subsetting requirements currently preclude their use. For example, even using WOFF 2 [[WOFF2]], fonts for CJK languages are too large to be practical.

    See the Progressive Font Enrichment: Evaluation Report [[PFE-report]] for the investigation which led to this specification.

Patch Based Incremental Transfer {#patch-incxfer}
=================================================

TODO(garretrieger): Describe the high level version of how this version operates.


Data Types {#data-types}
------------------------

### Encoding ### {#encoding}

All data types defined here are encoded into a byte representation for transport using CBOR
(Concise Binary Object Representation) [[!rfc8949]]. More information on how each data types
should be encoded by CBOR are given in the definition of those data types.

### Primitives ### {#primitives}

<table>
  <tr>
    <th>Data Type</th><th>Description</th><th>CBOR Major Type</th>
  </tr>
  <tr>
    <td>Integer</td><td>An integer value range [-2^64 - 1, 2^64 - 1] inclusive</td><td>0 or 1</td>
  </tr>
  <tr>
    <td>ByteString</td><td>Variable number of bytes</td><td>2</td>
  </tr>
  <tr>
    <td>ArrayOf&lt;Type&gt;</td><td>Array of a variable number of items of Type</td><td>4</td>
  </tr>
</table>

### SparseBitSet ### {#sparsebitset}

A data structure which stores a set of distinct unsigned integers. The set is represented as an
oct-tree where each node has 8 children that recursively sub-divides an interval into 8 equal
partitions. A tree of height <i>N</i> can store set membership for integers in the interval [0 and
8<sup><i>N</i></sup>-1] inclusive.

Given a node <i>p</i> which has 8 children: <i>c<sub>0</sub></i> ... <i>c<sub>7</sub></i> and is
in a tree, <i>T</i>, of height <i>N</i>, then:

*  D(<i>c<sub>i</sub></i>) is depth of node <i>c<sub>i</sub></i>, that is the number of edges between
    the root node and <i>c<sub>i</sub></i>.
    
*  Start(<i>c<sub>i</sub></i>) is the start (inclusive) of the interval  covered by
     <i>c<sub>i</sub></i> :<br/>
     Start(<i>c<sub>i</sub></i>) =
     Start(<i>p</i>) + <i>i</i> * 8<sup><i>N</i> - D(<i>c<sub>i</sub></i>)</sup>
     
*  End(<i>c<sub>i</sub></i>) is the end (exclusive) of the interval  covered by
     <i>c<sub>i</sub></i> :<br/>
     End(<i>c<sub>i</sub></i>) =
     Start(<i>p</i>) + (<i>i</i> + 1) * 8<sup><i>N</i> - D(<i>c<sub>i</sub></i>)</sup>
     
*  The value of node <i>p</i> is as a single byte (8 bits). If its bits are numbered from 0
    (most significant bit) to 7 (least significant bit) then bit <i>i</i> will be 1 if the
    set <i>S</i> contains at least one member in the interval
    [Start(<i>c<sub>i</sub></i>), End(<i>c<sub>i</sub></i>)), otherwise bit <i>i</i> will be 0.

*  If for node <i>p</i>, End(<i>p</i>) - Start(<i>p</i>) = 1, then <i>p</i> will have no children
    and its value byte is 0.

Set <i>S</i> is encoded into a ByteString by traversing the nodes of the tree <i>T</i> in level order
and appending the value byte for each node to the ByteString if the value byte has a non-zero value.

### Objects ### {#objects}

### Object Schemas ### {#schemas}


New Font Request {#rebase-request}
----------------------------------

### Standard Response ### {#rebase-standard-response}

### Errors ### {#rebase-errors}

Patch Font Request {#patch-request}
-----------------------------------

### Standard Response ### {#patch-standard-response}

### Recoverable Errors ### {#patch-recoverable-errors}

#### Client’s Original Font does not Match Server’s #### {#client-font-mismatch}

#### Client’s Base does not Match Server’s #### {#client-base-mismatch}

#### Client Codepoint Reordering does not Match Servers #### {#codepoint-reordering-mismatch}

#### Client Side Patched Base Checksum Mismatch #### {#patch-mismatch}

#### Cmap Format 4 Overflow #### {#cmap4-overflow}

#### Offset Overflow during Subsetting #### {#offset-overflow}

### Errors ### {#errors}

New Font Response {#rebase-response}
---------------------------------------------

Patch Font Response {#patch-response}
---------------------------------------------

Update Codepoint Ordering Response {#reindex-response}
----------------------------------------------------------------

Error Response {#error-response}
----------------------------------------

*  font not found.
*  bad request.
*  internal error.

Procedures {#procedures}
------------------------

### Computing Checksums ### {#computing-checksums}

### Codepoint reodering ### {#codepoint-reodering}

#### Computing Checksum #### {#reodering-checksum}

#### Recommended algorithm #### {#reordering-algorithm}

### Patch and Compression Formats ### {#patch-formats}

Range Request Incremental Transfer {#range-request-incxfer}
===========================================================

Negotiating Incremental Transfer Type {#negotiating-transfer-type}
==================================================================

<h2 class=no-num id=priv-sec>Privacy and Security Considerations</h2>

Issue: Note any issues that have been raised about privacy and security.
